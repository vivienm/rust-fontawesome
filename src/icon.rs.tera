/// Version of Font Awesome icon set
pub const ICON_VERSION: &str = "{{ version }}";
{% for icon in icons %}

/// [`{{ icon.name }}`](https://fontawesome.com/v{{ version }}/icons/{{ icon.name }})
pub const CHAR_{{ icon.const_ident }}: char = '\u{{ '{' }}{{ icon.unicode }}{{ '}' }}';
{%- endfor %}

/// The enum of Font Awesome icons.
#[derive(Clone, Copy, Debug, Eq, Hash, PartialEq)]
pub enum Icon {
{%- for icon in icons %}
    /// [`{{ icon.name }}`](https://fontawesome.com/v{{ version }}/icons/{{ icon.name }})
    {{ icon.enum_ident }},
{%- endfor %}
}

impl Icon {
    /// The array of available icons.
    pub fn variants() -> [Self; {{ icons | length }}] {
        static VARIANTS: [Icon; {{ icons | length }}] = [
{%- for icon in icons %}
            Icon::{{ icon.enum_ident }},
{%- endfor %}
        ];
        VARIANTS
    }

    /// The icon name.
    pub fn name(self) -> &'static str {
        match self {
{%- for icon in icons %}
            Self::{{ icon.enum_ident }} => "{{ icon.name }}",
{%- endfor %}
        }
    }

    /// The unicode glyph corresponding to an icon.
    pub fn char(self) -> char {
        match self {
{%- for icon in icons %}
            Self::{{ icon.enum_ident }} => '\u{{ '{' }}{{ icon.unicode }}{{ '}' }}',
{%- endfor %}
        }
    }
}

impl std::convert::TryFrom<char> for Icon {
    type Error = TryFromIconError;

    fn try_from(value: char) -> Result<Self, Self::Error> {
        match value {
{%- for icon in icons %}
            '\u{{ '{' }}{{ icon.unicode }}{{ '}' }}' => Ok(Self::{{ icon.enum_ident }}),
{%- endfor %}
            _ => Err(TryFromIconError),
        }
    }
}
