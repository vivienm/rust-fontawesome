/// Version of Font Awesome icon set
pub const ICON_VERSION: &str = "{{ version }}";
{% for icon in icons %}

/// [`{{ icon.name }}`](https://fontawesome.com/v{{ version }}/icons/{{ icon.name }})
pub const CHAR_{{ icon.const_ident }}: char = '\u{{ '{' }}{{ icon.unicode }}{{ '}' }}';
{%- endfor %}

/// The enum of Font Awesome icons.
#[derive(Clone, Copy, Debug, Eq, Hash, PartialEq)]
pub enum Icon {
{%- for icon in icons %}
    /// [`{{ icon.name }}`](https://fontawesome.com/v{{ version }}/icons/{{ icon.name }})
    {{ icon.enum_ident }},
{%- endfor %}
}

impl Icon {
    /// The number of available icons.
    pub const fn count() -> usize {
        {{ icons | length }}
    }

    const VARIANTS: [Icon; {{ icons | length }}] = [
{%- for icon in icons %}
        Icon::{{ icon.enum_ident }},
{%- endfor %}
    ];

    /// The array of available icons.
    pub const fn variants() -> &'static [Self] {
        &Self::VARIANTS
    }

    /// The icon name.
    pub const fn name(self) -> &'static str {
        match self {
{%- for icon in icons %}
            Self::{{ icon.enum_ident }} => "{{ icon.name }}",
{%- endfor %}
        }
    }

    /// The unicode glyph corresponding to an icon.
    pub const fn char(self) -> char {
        match self {
{%- for icon in icons %}
            Self::{{ icon.enum_ident }} => CHAR_{{ icon.const_ident }},
{%- endfor %}
        }
    }
}

impl std::convert::TryFrom<char> for Icon {
    type Error = IconTryFromError;

    fn try_from(value: char) -> Result<Self, Self::Error> {
        match value {
{%- for icon in icons %}
            CHAR_{{ icon.const_ident }} => Ok(Self::{{ icon.enum_ident }}),
{%- endfor %}
            _ => Err(IconTryFromError(())),
        }
    }
}
